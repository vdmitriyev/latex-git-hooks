__description__ = "Ensures that auxiliary files generated by LaTeX were not added to git history"

import argparse
import sys
import traceback
from typing import Sequence

auxiliary_extensions = [
    "-blx.bib",
    ".aux",
    ".auxlock",
    ".bbl",
    ".bcf",
    ".blg",
    ".dvi",
    ".fdb_latexmk",
    ".fls",
    ".log",
    ".nav",
    ".out",
    ".run.xml",
    ".snm",
    ".soc",
    ".spl",
    ".synctex.gz",
    ".tdo",
    ".toc",
    ".vrb",
    ".xwm",
]


def show_helper_git_message(filenames: list, verdicts: list) -> None:
    """Shows git helper message

    Args:
        filenames (list): list of all filenames
        verdicts (list): list of verdicts
    """
    print("here is how to fix it:")
    for index in range(len(filenames)):
        if verdicts[index]:
            print(f"git rm --cached {filenames[index]}")
    print("git commit --amend\n")


def is_auxiliary_file(file_path: str, verbose: bool = False) -> bool:
    """Checks if auxiliary files are not added to history

    Args:
        filename (str): name of the file
        verbose (bool, optional): prints additional information. Defaults to False.

    Returns:
        bool: valid or invalid file name
    """
    try:
        file_path_lower = file_path.lower()
        for extension in auxiliary_extensions:
            if file_path_lower.endswith(extension):
                print(f"Found an auxiliary file generated by LaTeX. Remove the file from commit: {file_path}")
                return False
    except Exception:
        # if verbose:
        print(f"Filename: {file_path}; exception: {traceback.format_exc()}")
        return False

    return True


def main(argv: Sequence[str] | None = None) -> int:

    parser = argparse.ArgumentParser(prog="check-latex-packages", description=__description__)

    parser.add_argument(
        "filenames",
        nargs="*",
        help="Filenames to process.",
    )

    parser.add_argument(
        "--verbose",
        default=False,
        type=bool,
        help="Prints additional information.",
    )

    args = parser.parse_args(argv)

    results = [not is_auxiliary_file(filename, args.verbose) for filename in args.filenames]

    if int(any(results)) != 0 and args.verbose:
        show_helper_git_message(args.filenames, results)

    return int(any(results))


if __name__ == "__main__":
    sys.exit(main())
